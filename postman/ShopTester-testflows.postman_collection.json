{
	"info": {
		"_postman_id": "c51e523e-5556-4928-ac8c-facb059c31f2",
		"name": "ShopTester-testflows",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43555422",
		"_collection_link": "https://viktor-6544461.postman.co/workspace/bb0aa7aa-6dad-4862-8045-1d577490deb5/collection/43555422-c51e523e-5556-4928-ac8c-facb059c31f2?action=share&source=collection_link&creator=43555422"
	},
	"item": [
		{
			"name": "TestFlowLoginAsAdminAndCreateAProductAndThenDeleteProduct",
			"item": [
				{
					"name": "TestFlow_LoginAsAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Statuskoden är 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Användarrollen är admin\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    if (jsonData.role) {\r",
									"        pm.expect(jsonData.role).to.eql(\"admin\");\r",
									"    } else {\r",
									"        console.warn(\"Ingen roll hittades, användaren är kanske redan inloggad\");\r",
									"        pm.expect(jsonData).to.not.have.property(\"error\");\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Email\": \"admin@admin.com\",\r\n    \"Password\": \"admin123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "TestFlow_GetProducts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Have response 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Is an Array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "TestFlow_CreateProduct.RequiresAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Is an object\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"})\r",
									"\r",
									"pm.test(\"Stored product ID\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.environment.set(\"product_id\", jsonData.insertId);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{NewProductName}}\",\r\n    \"price\": {{NewProductPrice}},\r\n    \"categoryId\": {{NewProductCategory}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "TestFlow_GetProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Have response 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Is an object\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object')\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/products/{{product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TestFlow_DeleteProduct.RequiresAdmin",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/products/{{product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TestFlow_Logout",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TestFlowLoginAsUserAndOrderAProduct",
			"item": [
				{
					"name": "TestFlow_LoginAsUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Statuskoden är 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Stored user ID\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.environment.set(\"user_id\", jsonData.id);\r",
									"})\r",
									"\r",
									"pm.test(\"Användarrollen är user\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    if (jsonData.role) {\r",
									"        pm.expect(jsonData.role).to.eql(\"user\");\r",
									"    } else {\r",
									"        console.warn(\"Ingen roll hittades, användaren är kanske redan inloggad\");\r",
									"        pm.expect(jsonData).to.not.have.property(\"error\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Email\": \"john@email.com\",\r\n    \"Password\": \"john123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "TestFlow_GetProducts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Have response 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Is an Array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    pm.environment.set(\"product_id\", 10);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "TestFlow_GetProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Have response 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Is an object\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/products/{{product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
						"name": "TestFlow_CreateOrder",
						"event": [
							{
							"listen": "test",
							"script": {
								"exec": [
								"pm.test(\"Have response 200\", function () {",
								"    pm.response.to.have.status(200);",
								"});",
								"",
								"pm.test(\"Order Id added\", function () {",
								"    const jsonData = pm.response.json();",
								"    pm.environment.set(\"order_id\", jsonData.id);",
								"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
							}
						],
						"request": {
							"method": "POST",
							"header": [],
							"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\": {{product_to_order_id}},\r\n    \"quantity\": 4\r\n}",
							"options": {
								"raw": {
								"language": "json"
								}
							}
							},
							"url": {
							"raw": "{{base_url}}/api/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders"
							]
							}
						},
						"response": []
				},
				{
					"name": "TestFlow_GetOrder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Have response 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Is an object\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"})\r",
									"\r",
									"pm.test(\"Has correct total\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const expectedTotal = jsonData.price * jsonData.quantity;\r",
									"    pm.expect(jsonData.total).to.eql(expectedTotal);\r",
									"});\r",
									"\r",
									"pm.test(\"Has order date\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
									"    const date = new Date(jsonData.createdAt);\r",
									"    pm.expect(date.toString()).not.to.equal(\"Invalid Date\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/user/{{user_id}}/orders/{{order_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"user",
								"{{user_id}}",
								"orders",
								"{{order_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TestFlow_Logout",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}